[{"/Users/jimmytran16/Personal-Work/Learning-React/project-practice/Twitter/twitter-client/src/reportWebVitals.js":"1","/Users/jimmytran16/Personal-Work/Learning-React/project-practice/Twitter/twitter-client/src/Components/LandingComponent/LoginForm/LoginForm.js":"2","/Users/jimmytran16/Personal-Work/Learning-React/project-practice/Twitter/twitter-client/src/Components/LandingComponent/NavLandingComponent/NavLandingComponent.js":"3","/Users/jimmytran16/Personal-Work/Learning-React/project-practice/Twitter/twitter-client/src/Components/LandingComponent/RegisterForm/RegisterForm.js":"4","/Users/jimmytran16/Personal-Work/Learning-React/project-practice/Twitter/twitter-client/src/Components/LandingComponent/LandingComponent.js":"5","/Users/jimmytran16/Personal-Work/Learning-React/project-practice/Twitter/twitter-client/src/App.js":"6","/Users/jimmytran16/Personal-Work/Learning-React/project-practice/Twitter/twitter-client/src/index.js":"7","/Users/jimmytran16/Personal-Work/Learning-React/project-practice/Twitter/twitter-client/src/Components/DashboardComponent/DashboardComponent.js":"8","/Users/jimmytran16/Personal-Work/Learning-React/project-practice/Twitter/twitter-client/src/Components/DashboardComponent/PostComponent/PostComponent.js":"9","/Users/jimmytran16/Personal-Work/Learning-React/project-practice/Twitter/twitter-client/src/Components/ProfileComponent/ProfileComponent.js":"10","/Users/jimmytran16/Personal-Work/Learning-React/project-practice/Twitter/twitter-client/src/Configs.js":"11","/Users/jimmytran16/Personal-Work/Learning-React/project-practice/Twitter/twitter-client/src/Helpers/helpers.js":"12","/Users/jimmytran16/Personal-Work/Learning-React/project-practice/Twitter/twitter-client/src/Components/DashboardComponent/CommentComponent/CommentComponent.js":"13"},{"size":362,"mtime":1606538118401,"results":"14","hashOfConfig":"15"},{"size":3680,"mtime":1607836135730,"results":"16","hashOfConfig":"15"},{"size":1183,"mtime":1607228738871,"results":"17","hashOfConfig":"15"},{"size":8027,"mtime":1607832946954,"results":"18","hashOfConfig":"15"},{"size":2532,"mtime":1607228738870,"results":"19","hashOfConfig":"15"},{"size":2445,"mtime":1607841198810,"results":"20","hashOfConfig":"15"},{"size":500,"mtime":1606538118401,"results":"21","hashOfConfig":"15"},{"size":4561,"mtime":1608139577918,"results":"22","hashOfConfig":"15"},{"size":4671,"mtime":1608138476215,"results":"23","hashOfConfig":"15"},{"size":6471,"mtime":1607838646407,"results":"24","hashOfConfig":"15"},{"size":150,"mtime":1608180887984,"results":"25","hashOfConfig":"15"},{"size":227,"mtime":1607839697394,"results":"26","hashOfConfig":"15"},{"size":4655,"mtime":1608180545527,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1kfn9a",{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},"/Users/jimmytran16/Personal-Work/Learning-React/project-practice/Twitter/twitter-client/src/reportWebVitals.js",[],["61","62"],"/Users/jimmytran16/Personal-Work/Learning-React/project-practice/Twitter/twitter-client/src/Components/LandingComponent/LoginForm/LoginForm.js",["63"],"/Users/jimmytran16/Personal-Work/Learning-React/project-practice/Twitter/twitter-client/src/Components/LandingComponent/NavLandingComponent/NavLandingComponent.js",[],"/Users/jimmytran16/Personal-Work/Learning-React/project-practice/Twitter/twitter-client/src/Components/LandingComponent/RegisterForm/RegisterForm.js",["64","65"],"import React, { useEffect, useState } from 'react'\nimport './style.css'\nimport { Modal, Form, Button, Col } from 'react-bootstrap'\nimport { faTwitterSquare } from '@fortawesome/free-brands-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport axios from 'axios'\nimport Configs from '../../../Configs'\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n\n// initialize the months, days ,and years for the birthday drop downs\nconst months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n\"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\nconst years = [2020, 2019, 2018, 2017, 2016, 2015, 2014, 2013, 2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004, 2003, 2002,\n 2001, 2000, 1999, 1998, 1997, 1996, 1995, 1994, 1993, 1992, 1991, 1990, 1989, 1988, 1987, 1986, 1985, 1984, 1983, 1982, 1981,\n 1980, 1979, 1978, 1977, 1976, 1975, 1974, 1973, 1972, 1971, 1970, 1969, 1968, 1967, 1966, 1965, 1964, 1963, 1962, 1961, 1960, 1959,\n 1958, 1957, 1956, 1955, 1954, 1953, 1952, 1951, 1950, 1949, 1948, 1947, 1946, 1945, 1944, 1943, 1942, 1941, 1940, 1939, 1938, 1937, 1936,\n 1935, 1934, 1933, 1932, 1931, 1930, 1929, 1928, 1927, 1926, 1925, 1924, 1923, 1922, 1921, 1920, 1919, 1918, 1917, 1916, 1915, 1914, 1913, 1912,\n 1911, 1910, 1909, 1908, 1907, 1906, 1905]\n\nconst days = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];\n\n/**\n * Componenet function that represents the Register form \n * @param {Object} props - data that are sent to the component.\n * @param {String} props.show - a boolean tells the sign up modal to show or not\n*/\n\nfunction RegisterForm(props) {\n    const [show, setShow] = useState(props.show);\n    const [name, setName] = useState(\"\");\n    const [username,setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [month,setMonth] = useState(months[0]);\n    const [day,setDay] = useState(days[0]);\n    const [year,setYear] = useState(years[0]);\n    const [phone,setPhone] = useState(\"\");\n    const [successSignUp,setSuccessSignUp] = useState(null);\n    const [isLoading,setIsLoading] = useState(true);\n     \n    useEffect(() => {\n        setShow(props.show);\n    }, [props.show])\n\n    const handleRegistration  = (e) => {\n        console.log('registration handling')\n        setIsLoading(false)\n        setTimeout(() => {\n            axios.post(`${Configs.SERVER_URL}/signup`,{\n                name:name,\n                username:username,\n                password:password,\n                birthday:month + '-' + day + '-' + year,\n                phone:phone\n            })\n            .then(response => {\n                console.log(response.data);\n                setIsLoading(true)\n                if (response.data.success) {\n                    setSuccessSignUp({\n                        msg: 'Sucessfully Signed up!',\n                        style: {\n                            color:'green'\n                        }\n                    })\n                }else {\n                    setSuccessSignUp({\n                        msg: 'User Already Exists!',\n                        style: {\n                            color:'red'\n                        }\n                    })\n                }\n            })\n            .catch(err => console.error(err))\n        },2000)\n    }\n\n    return (\n        <Modal className=\"modal-main-container\" show={show} onHide={() => setShow(false)}>\n            <div className=\"twitter-icon-container\">\n                <FontAwesomeIcon className=\"twitter-icon\" icon={faTwitterSquare} size=\"2x\" />\n            </div>\n            <Modal.Header closeButton>\n                <Modal.Title>Create your account</Modal.Title>\n            </Modal.Header>\n            <Modal.Body className=\"modal-body\">\n                <Form> \n                    <Form.Group controlId=\"formGroupEmail\">\n                        <Form.Control style={inputStyle} type=\"email\" placeholder=\"Name\" onChange={(e) => setName(e.target.value)} />\n                        <div className=\"character-count-div\">{name.length}/50</div>\n                    </Form.Group>\n                    <Form.Group controlId=\"formGroupPassword\">\n                        <Form.Control style={inputStyle} type=\"text\" placeholder=\"Username\" onChange={(e) => setUsername(e.target.value)} />\n                    </Form.Group>\n                    <Form.Group controlId=\"formGroupPassword\">\n                        <Form.Control style={inputStyle} type=\"password\" placeholder=\"Password\" onChange={(e) => setPassword(e.target.value)} />\n                    </Form.Group>\n                    <Form.Group controlId=\"formGroupPhone\">\n                        <Form.Control style={inputStyle} type=\"text\" placeholder=\"Phone\" onChange={(e) => setPhone(e.target.value)}  />\n                    </Form.Group>\n                    <Form.Row>\n                        <Form.Group as={Col} controlId=\"formGridState\" onChange={(e) => setMonth(e.target.value)}>\n                            <Form.Label>Month</Form.Label>\n                            <Form.Control style={inputStyle} as=\"select\" defaultValue=\"Choose...\">\n                                {\n                                    months.map((month, index) => {\n                                        return (\n                                            <option key={index}>{month}</option>\n                                        )\n                                    })\n                                }\n                            </Form.Control>\n                        </Form.Group>\n\n                        <Form.Group as={Col} controlId=\"formGridState\" onChange={(e) => setDay(e.target.value)} >\n                            <Form.Label>Day</Form.Label>\n                            <Form.Control style={inputStyle} as=\"select\" defaultValue=\"Choose...\">\n                                {\n                                    days.map((day, index) => {\n                                        return (\n                                            <option key={index}>{day}</option>\n                                        )\n                                    })\n                                }\n                            </Form.Control>\n                        </Form.Group>\n\n                        <Form.Group as={Col} controlId=\"formGridState\" onChange={(e) => setYear(e.target.value)}>\n                            <Form.Label>Year</Form.Label>\n                            <Form.Control style={inputStyle} as=\"select\" defaultValue=\"Choose...\">\n                                {\n                                    years.map((year, index) => {\n                                        return (\n                                            <option key={index}>{year}</option>\n                                        )\n                                    })\n                                }\n                            </Form.Control>\n                        </Form.Group>\n                    </Form.Row>\n                    <div className=\"sign-up-btn-container\">\n                        <Button className=\"next-btn\" variant=\"primary\" onClick={handleRegistration}>\n                            <span >Sign Up</span>\n                            <span hidden={isLoading} className=\"register-loading-span\">\n                                <CircularProgress color=\"blue\" size={15} thickness={6} />\n                            </span>\n                        </Button>\n                        { successSignUp\n                        ? (<span style={successSignUp.style}>{successSignUp.msg}</span>)\n                        : (<span></span>)\n                        }\n                    </div>\n                </Form>\n            </Modal.Body>\n\n        </Modal>\n\n    )\n}\n\n// Styles\nconst inputStyle = {\n    height: '60px',\n    borderBottom: '3px lightgrey solid',\n    borderRadius: 'unset',\n}\n\nconst successSignUpSpan = {\n    color:'green'\n}\n\nconst failSignUpSpan = {\n    color:'red'\n}\n\nexport default RegisterForm;","/Users/jimmytran16/Personal-Work/Learning-React/project-practice/Twitter/twitter-client/src/Components/LandingComponent/LandingComponent.js",[],["66","67"],"/Users/jimmytran16/Personal-Work/Learning-React/project-practice/Twitter/twitter-client/src/App.js",[],"/Users/jimmytran16/Personal-Work/Learning-React/project-practice/Twitter/twitter-client/src/index.js",[],["68","69"],"/Users/jimmytran16/Personal-Work/Learning-React/project-practice/Twitter/twitter-client/src/Components/DashboardComponent/DashboardComponent.js",["70","71"],"/Users/jimmytran16/Personal-Work/Learning-React/project-practice/Twitter/twitter-client/src/Components/DashboardComponent/PostComponent/PostComponent.js",[],"/Users/jimmytran16/Personal-Work/Learning-React/project-practice/Twitter/twitter-client/src/Components/ProfileComponent/ProfileComponent.js",["72","73"],"import React, { useEffect, useState } from 'react'\nimport './style.css'\nimport PostComponent from '../DashboardComponent/PostComponent/PostComponent'\nimport { Container, Nav, Card, Button, Row, Col } from 'react-bootstrap'\nimport avatarImg from '../../avatar.png'\nimport Axios from 'axios'\nimport { useHistory } from 'react-router-dom'\nimport Config from '../../Configs'\n\n// Styles\nconst cardBodyStyleHeader = {\n    height: \"10vh\"\n}\n\nconst navStyling = {\n    marginTop: '20px',\n}\n\nconst navLinkDefaultStyling = {\n    border: 'unset'\n}\n\nconst navLinkOnClickStyling = {\n    border: 'unset!important',\n    borderStyle: 'solid',\n    borderRight: 'unset',\n    borderLeft: 'unset',\n    borderTop: 'unset',\n    borderColor: '#08a0e9!important'\n}\n\n/**\n * Componenet function that represents the user's profile page\n */\nfunction ProfileComponent() {\n    const [tweetsBtnStyling, setTweetsBtnStyling] = useState(navLinkDefaultStyling)\n    const [repliesBtnStyling, setRepliesBtnStyling] = useState(navLinkDefaultStyling)\n    const [mediaBtnStyling, setMediaBtnStyling] = useState(navLinkDefaultStyling)\n    const [likesBtnStyling, setLikesBtnStyling] = useState(navLinkDefaultStyling)\n    const [userData, setUserData] = useState({})\n    const [userPost, setUsersPost] = useState([])\n\n    const history = useHistory()\n\n    useEffect(() => {\n        // validate if the user is currently in here\n        if (!localStorage['user']) {\n            history.push('/')\n            return;\n        }\n        console.log('set styling!!!!')\n        setTweetsBtnStyling(navLinkDefaultStyling);\n        let USER_DATA = JSON.parse(localStorage['user']);\n        setUserData(USER_DATA);\n\n        // call api to get all of the posts of that user\n        Axios(`${Config.SERVER_URL}/home/profile?userid=${USER_DATA._id}`,{\n            method:'get',\n            headers: {\n                authorization: `Bearer ${localStorage.getItem('accessToken')}`\n            },\n        })\n        .then(response => setUsersPost(response.data.data.reverse()))\n        .catch(err => console.error(err));\n\n    }, [])\n\n    // function to handle the clicks of the menus\n    function handleLinkClicks(event) {\n        let navClicked = event.target.innerText\n        console.log(navClicked)\n        switch (navClicked) {\n            case 'Tweets':\n                setTweetsBtnStyling(navLinkOnClickStyling);\n                setRepliesBtnStyling(navLinkDefaultStyling);\n                setMediaBtnStyling(navLinkDefaultStyling);\n                setLikesBtnStyling(navLinkDefaultStyling);\n                break;\n            case 'Tweets & Replies':\n                setTweetsBtnStyling(navLinkDefaultStyling);\n                setRepliesBtnStyling(navLinkOnClickStyling);\n                setMediaBtnStyling(navLinkDefaultStyling);\n                setLikesBtnStyling(navLinkDefaultStyling);\n                break;\n            case 'Media':\n                setTweetsBtnStyling(navLinkDefaultStyling);\n                setRepliesBtnStyling(navLinkDefaultStyling);\n                setMediaBtnStyling(navLinkOnClickStyling);\n                setLikesBtnStyling(navLinkDefaultStyling);\n                break;\n            case 'Likes':\n                setTweetsBtnStyling(navLinkDefaultStyling);\n                setRepliesBtnStyling(navLinkDefaultStyling);\n                setMediaBtnStyling(navLinkDefaultStyling);\n                setLikesBtnStyling(navLinkOnClickStyling);\n                break;\n            default:\n                console.log('No cases matched!')\n                break;\n        }\n    }\n    \n    // JSX that represents content of when user has no tweets yet\n    const noTweetYetContent = (<div className=\"no-tweet-yet-container\">\n        <h5>You haven't tweeted yet</h5>\n        <p>When you post a tweet, it'll show up here.</p>\n    </div>)\n\n    return (\n        <Container>\n            <Card className=\"text-center\">\n                <Card.Body style={cardBodyStyleHeader}>\n                </Card.Body>\n                <Card.Body>\n                    <hr />\n                    <Row>\n                        <Col>\n                            <Row>\n                                <Col md={12}>\n                                    <div>\n                                        <img className=\"user-profile-avatar\" src={avatarImg} />\n                                    </div>\n                                </Col>\n                                <Col md={12}>\n                                    <p className=\"user-username\">@{userData.username}</p>\n                                    <div className=\"follow-details-container\">\n                                        <p><strong>440</strong> Following</p>\n                                        <p><strong>200</strong> Follwers</p>\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Col>\n                        <Col>\n                            <Button className=\"edit-profile-btn\" variant=\"primary\">Edit profile</Button>\n                        </Col>\n                    </Row>\n                    <Nav className=\"navigation-container\" style={navStyling} justify variant=\"tabs\" defaultActiveKey=\"/home\">\n                        <Nav.Item>\n                            <Nav.Link onClick={handleLinkClicks} style={tweetsBtnStyling}>Tweets</Nav.Link>\n                        </Nav.Item>\n                        <Nav.Item>\n                            <Nav.Link onClick={handleLinkClicks} style={repliesBtnStyling} >Tweets & Replies</Nav.Link>\n                        </Nav.Item>\n                        <Nav.Item>\n                            <Nav.Link onClick={handleLinkClicks} style={mediaBtnStyling} >Media</Nav.Link>\n                        </Nav.Item>\n                        <Nav.Item>\n                            <Nav.Link onClick={handleLinkClicks} style={likesBtnStyling} >Likes</Nav.Link>\n                        </Nav.Item>\n                    </Nav>\n                </Card.Body>\n            </Card>\n            {\n                userPost.length === 0\n                    ? (\n                        noTweetYetContent\n                    )\n                    : userPost.map((post, index) => {\n                        return (\n                            <PostComponent key={index} tweet={post.tweet} post={post} profile={true} />\n                        )\n                    })\n            }\n        </Container>\n    )\n}\n\n\nexport default ProfileComponent;",["74","75"],"/Users/jimmytran16/Personal-Work/Learning-React/project-practice/Twitter/twitter-client/src/Configs.js",[],"/Users/jimmytran16/Personal-Work/Learning-React/project-practice/Twitter/twitter-client/src/Helpers/helpers.js",[],"/Users/jimmytran16/Personal-Work/Learning-React/project-practice/Twitter/twitter-client/src/Components/DashboardComponent/CommentComponent/CommentComponent.js",["76","77","78","79","80","81","82"],"import React, { useEffect, useState } from 'react'\nimport { Modal, Form, Button, Col, Row } from 'react-bootstrap'\nimport './style.css'\nimport avatarImage from '../../../avatar.png'\nimport verticalImage from '../../../vertical.png'\nimport moment from 'moment'\nimport axios from 'axios'\nimport Configs from '../../../Configs'\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n\nimport { faGripLinesVertical } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\n\nexport default function CommentComponent(props) {\n    const [show, setShow] = useState(props.show)\n    const [reply, setReply] = useState(\"\")\n    const [disableReplyBtn, setDisableReplyBtn] = useState(true)\n    const [hideCircularProgress,setHideCircularProgress] = useState(true)\n\n    useEffect(() => {\n        setShow(props.show);\n    }, [props.show])\n\n    // update the reply\n    const updateReplyHandler = (e) => {\n        console.log(e.target.value);\n        // get the reply value and update it\n        let REPLY_VALUE = e.target.value;\n        setReply(REPLY_VALUE);\n        // check if the reply has a value, if not then disable the button\n        setDisableReplyBtn((e.target.value.length === 0) ? true : false);\n    }\n\n    // function to send the reploy to the server to update the post's comments\n    const handleCommentSubmission = (e) => {\n        // set the circular progress \n        setHideCircularProgress(false)\n\n        // call the interaction endpoint to pass in the comment\n        setTimeout(() =>{\n            axios({\n                method:'post',\n                url:`${Configs.SERVER_URL}/home/interaction`,\n                headers: {\n                    authorization: `bearer ${localStorage.getItem('accessToken')}`\n                },\n                data: {\n                    action:'COMMENT',\n                    id:props.post._id,\n                    reply:reply,\n                    userId: JSON.parse(localStorage.getItem('user'))._id,\n                    username: JSON.parse(localStorage.getItem('user')).username\n                }\n            })\n            .then(response => {\n                //clear reply field\n                setReply(\"\")\n                setHideCircularProgress(true)\n                // get rid off the comment window\n                setShow(false)\n                console.log(response.data)\n            })\n            .catch(err => console.error(err));\n        }, 1000)\n\n    }\n\n    return (\n        <Modal className=\"modal-main-container\" show={show} onHide={() => setShow(false)}>\n            <Modal.Header closeButton>\n            </Modal.Header>\n            <Modal.Body className=\"modal-body\">\n                <Form>\n                    <div className=\"comment-info-container\">\n                        <div style={{ display: 'flex' }}>\n                            <div>\n                                <img style={{display:'block'}} className=\"commenter-profile-pic\" src={avatarImage} height=\"40px\" width=\"40px\" />\n                                <img  src={verticalImage} height=\"40px\" width=\"40px\" />\n                            </div>\n                            <div style={{margin:'0px 12px'}}>\n                                <div className=\"user-name-container\" style={{ display: \"flex\", fontSize:'12px' }}> <p style={{ margin:'unset'}}>{props.post.name}</p> <span>@{props.post.username} • {moment(props.post.date.split('T')[0]).fromNow()} </span> </div>\n                                <p style={{wordBreak:'break-word'}}>{props.post.tweet}</p>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"comment-reply-container\">\n                        <img className=\"commenter-profile-pic\" src={avatarImage} height=\"40px\" width=\"40px\" />\n                        <Form.Control value={reply} className=\"comment-text-area\" onChange={updateReplyHandler} style={{ border: 'unset' }} as=\"textarea\" rows={3} placeholder=\"Tweet your reply\" ></Form.Control>\n                    </div>\n                    <div className=\"reply-button-container\">\n                        <Button id=\"COMMENT\" onClick={handleCommentSubmission} disabled={disableReplyBtn} >\n                            Reply \n                            <span style={{margin:'0px 3px'}} hidden={hideCircularProgress} className=\"loader-reply-comment\">\n                                <CircularProgress color=\"primary\" size={15} thickness={6} />    \n                            </span> \n                        </Button>\n                    </div>\n                </Form>\n            </Modal.Body>\n\n        </Modal>\n    )\n}",{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":1,"column":27,"nodeType":"89","messageId":"90","endLine":1,"endColumn":33},{"ruleId":"87","severity":1,"message":"91","line":170,"column":7,"nodeType":"89","messageId":"90","endLine":170,"endColumn":24},{"ruleId":"87","severity":1,"message":"92","line":174,"column":7,"nodeType":"89","messageId":"90","endLine":174,"endColumn":21},{"ruleId":"83","replacedBy":"93"},{"ruleId":"85","replacedBy":"94"},{"ruleId":"83","replacedBy":"95"},{"ruleId":"85","replacedBy":"96"},{"ruleId":"87","severity":1,"message":"88","line":1,"column":38,"nodeType":"89","messageId":"90","endLine":1,"endColumn":44},{"ruleId":"97","severity":1,"message":"98","line":57,"column":8,"nodeType":"99","endLine":57,"endColumn":17,"suggestions":"100"},{"ruleId":"97","severity":1,"message":"101","line":66,"column":8,"nodeType":"99","endLine":66,"endColumn":10,"suggestions":"102"},{"ruleId":"103","severity":1,"message":"104","line":121,"column":41,"nodeType":"105","endLine":121,"endColumn":96},{"ruleId":"83","replacedBy":"106"},{"ruleId":"85","replacedBy":"107"},{"ruleId":"87","severity":1,"message":"108","line":2,"column":31,"nodeType":"89","messageId":"90","endLine":2,"endColumn":34},{"ruleId":"87","severity":1,"message":"109","line":2,"column":36,"nodeType":"89","messageId":"90","endLine":2,"endColumn":39},{"ruleId":"87","severity":1,"message":"110","line":12,"column":10,"nodeType":"89","messageId":"90","endLine":12,"endColumn":29},{"ruleId":"87","severity":1,"message":"111","line":13,"column":10,"nodeType":"89","messageId":"90","endLine":13,"endColumn":25},{"ruleId":"103","severity":1,"message":"104","line":79,"column":33,"nodeType":"105","endLine":79,"endColumn":145},{"ruleId":"103","severity":1,"message":"104","line":80,"column":33,"nodeType":"105","endLine":80,"endColumn":88},{"ruleId":"103","severity":1,"message":"104","line":90,"column":25,"nodeType":"105","endLine":90,"endColumn":111},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'successSignUpSpan' is assigned a value but never used.","'failSignUpSpan' is assigned a value but never used.",["112"],["113"],["112"],["113"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'loadTime'. Either include them or remove the dependency array.","ArrayExpression",["114"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["115"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["112"],["113"],"'Col' is defined but never used.","'Row' is defined but never used.","'faGripLinesVertical' is defined but never used.","'FontAwesomeIcon' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},"Update the dependencies array to be: [history, loadTime, refresh]",{"range":"120","text":"121"},"Update the dependencies array to be: [history]",{"range":"122","text":"123"},[1947,1956],"[history, loadTime, refresh]",[2071,2073],"[history]"]